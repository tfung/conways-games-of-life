{"version":3,"sources":["Grid.js","Control.js","helper.js","constants.js","App.js","reportWebVitals.js","index.js"],"names":["Grid","props","grid","gameState","handleUpdateCell","className","map","r","rIndex","c","cIndex","isFilled","onClick","Control","isPaused","numRows","numCols","togglePause","clearGrid","generateRandomGrid","updateGridSize","useState","gridSize","setGridSize","type","value","onChange","target","parseInt","initGrid","x","y","Array","fill","updateGrid","updatedGrid","i","j","isCellAlive","neighbourCount","k","l","setGameState","numberOfPoints","Math","floor","random","rows","cols","App","useEffect","timer","setInterval","updateGameState","clearInterval","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ce28c431.chunk.js","sourcesContent":["const Grid = (props) => {\n    const {gameState: {grid}, handleUpdateCell} = props;\n\n    return (\n        <div className=\"grid\">\n            {\n                grid.map((r, rIndex) => (\n                    <div key={rIndex} className=\"grid-row\">\n                        {r.map((c, cIndex) => {\n                            const isFilled = c;\n\n                            return (\n                                <span key={cIndex} onClick={() => handleUpdateCell(rIndex, cIndex)} className={`grid-col ${isFilled ? 'grid-col-filled' : ''}`} />\n                            )\n                        })}\n                    </div>\n                ))\n            }\n        </div>\n    );\n}\n\nexport default Grid;","import {useState} from 'react';\n\nconst Control = (props) => {\n    const {\n        gameState: {isPaused, numRows = 0, numCols = 0},\n        togglePause,\n        clearGrid,\n        generateRandomGrid,\n        updateGridSize\n    } = props;\n\n    const [gridSize, setGridSize] = useState({\n        numRows,\n        numCols\n    });\n\n    return (\n        <div className=\"control\">\n            <button onClick={() => togglePause()}>{isPaused ? 'Unpause Game' : 'Pause Game'}</button>\n            <button onClick={() => clearGrid()}>Clear Grid</button>\n            <button onClick={() => generateRandomGrid()}>Generate Random Grid</button>\n            <div className=\"rol-col-update-section\">\n                <div>\n                    <label>\n                        Number of rows:\n                        <input\n                            type=\"text\"\n                            value={gridSize.numRows}\n                            onChange={({target: {value}}) => setGridSize({numRows: parseInt(value), numCols: gridSize.numCols})} />\n                    </label>\n                    <label>\n                        Number of columns:\n                        <input\n                            type=\"text\"\n                            value={gridSize.numCols}\n                            onChange={({target: {value}}) => setGridSize({numRows: gridSize.numRows, numCols: parseInt(value)})}  />\n                    </label>\n                </div>\n                <button onClick={() => updateGridSize(gridSize.numRows, gridSize.numCols)}>Update Grid</button>\n            </div>\n        </div>\n    );\n};\n\nexport default Control;","import {DEFAULT_START_ROWS, DEFAULT_START_COLS} from './constants';\n\nexport const initGrid = (x = DEFAULT_START_ROWS, y = DEFAULT_START_COLS) => {\n    return new Array(x).fill(null).map(r => new Array(y).fill(false));\n};\n\nexport const getRandomCoordinate = (numRows, numCols) => {\n    const x = Math.floor(Math.random()*100 % numRows);\n    const y = Math.floor(Math.random()*100 % numCols);\n\n    return {x, y};\n}\n\n/* \nUpdate grid rules:\n\n1. Any live cell with fewer than two live neighbours dies, as if by underpopulation.\n2. Any live cell with two or three live neighbours lives on to the next generation.\n3. Any live cell with more than three live neighbours dies, as if by overpopulation.\n4. Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.\n*/\nexport const updateGrid = (grid, numRows, numCols) => {\n    const updatedGrid = initGrid(numRows, numCols);\n\n    for (let i=0; i<numRows; i++) {\n        for (let j=0; j<numCols; j++) {\n            const isCellAlive = grid[i][j];\n            let neighbourCount = 0;\n\n            for (let k=i-1; k<=i+1; k++) {\n                for (let l=j-1; l<=j+1; l++) {\n                    if (k >= 0 && k < numRows\n                            && l >= 0 && l < numCols\n                            && !(k === i && l === j)\n                            && grid[k][l]) {\n\n                        neighbourCount++;\n                    }\n                }\n            }\n\n            if (isCellAlive && (neighbourCount >= 2 && neighbourCount <= 3)) {\n                updatedGrid[i][j] = true;\n            } else if (!isCellAlive && neighbourCount === 3) {\n                updatedGrid[i][j] = true;\n            }\n        }\n    }\n\n    return updatedGrid;\n};","export const DEFAULT_START_ROWS = 25;\nexport const DEFAULT_START_COLS = 25;","import {useState, useEffect} from 'react';\nimport './App.css';\nimport Grid from './Grid';\nimport Control from './Control';\nimport {initGrid, updateGrid, getRandomCoordinate} from './helper';\nimport {DEFAULT_START_ROWS, DEFAULT_START_COLS} from './constants';\n\nconst handleUpdateCell = (gameState, setGameState) => (x, y) => {\n  gameState.grid[x][y] = !gameState.grid[x][y];\n  setGameState({...gameState})\n};\n\nconst updateGameState = (gameState, setGameState) => {\n  if (!gameState.isPaused) {\n    setGameState({\n      ...gameState,\n      grid: updateGrid(gameState.grid, gameState.numRows, gameState.numCols)\n    })\n  }\n};\n\nconst togglePause = (gameState, setGameState) => () => {\n  setGameState({\n    ...gameState,\n    isPaused: !gameState.isPaused\n  });\n};\n\nconst clearGrid = (gameState, setGameState) => () => {\n  setGameState({\n    ...gameState,\n    grid: initGrid(gameState.numRows, gameState.numCols)\n  });\n}\n\nconst generateRandomGrid = (gameState, setGameState) => () => {\n  const grid = initGrid(gameState.numRows, gameState.numCols);\n  const numberOfPoints = Math.floor(gameState.numRows * gameState.numCols * 0.3);\n\n  for (let i=0 ; i<numberOfPoints; i++) {\n    const {x, y} = getRandomCoordinate(gameState.numRows, gameState.numCols);\n\n    grid[x][y] = !grid[x][y];\n  }\n\n  setGameState({\n    ...gameState,\n    grid\n  });\n}\n\nconst updateGridSize = (gameState, setGameState) => (rows, cols) => {\n  setGameState({\n    ...gameState,\n    numRows: rows,\n    numCols: cols,\n    grid: initGrid(rows, cols)\n  });\n}\n\nfunction App() {\n  const [gameState, setGameState] = useState({\n    grid: initGrid(),\n    isPaused: true,\n    numRows: DEFAULT_START_ROWS,\n    numCols: DEFAULT_START_COLS\n  });\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      updateGameState(gameState, setGameState)\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, [gameState]);\n\n  return (\n    <div className=\"App\">\n      <h1>Conway's Game of Life</h1>\n      <Grid gameState={gameState} handleUpdateCell={handleUpdateCell(gameState, setGameState)} />\n      <Control\n        gameState={gameState}\n        togglePause={togglePause(gameState, setGameState)}\n        clearGrid={clearGrid(gameState, setGameState)}\n        generateRandomGrid={generateRandomGrid(gameState, setGameState)}\n        updateGridSize={updateGridSize(gameState, setGameState)}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}